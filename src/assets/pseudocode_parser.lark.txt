// Grammar for pseudocode with PEMDAS and IF statements

// Main program structure
program: statement*

// Statements
statement: input_stmt
         | output_stmt
         | assign_stmt
         | if_stmt

// Input statement: e.g., INPUT x, yx_10
input_stmt: "INPUT" ident_list

// Output statement: e.g., OUTPUT xz, xcb_1x
output_stmt: "OUTPUT" ident_list

// Assignment statement: e.g., assign x = 15
assign_stmt: "assign" IDENT "=" expr

// IF statement with THEN, ELSE IF, ELSE
if_stmt: "IF" condition "THEN" statement* "END"
       | "IF" condition "THEN" statement* elseif_clause* else_clause? "END"

elseif_clause: "ELSE" "IF" condition statement* "END"
else_clause: "ELSE" statement* "END"

// Conditions: e.g., vv >= 1 OR vv == 0
condition: expr (comp_op expr)* (log_op condition)?

// Comparison operators
comp_op: "==" | ">=" | "<" | ">" | "<=" | "!="

// Logical operators
log_op: "OR" | "AND"

// Expressions with PEMDAS
expr: term ( ("+" | "-") term )*              // Addition and subtraction
term: factor ( ("*" | "/") factor )*          // Multiplication and division
factor: NUMBER                                // Numeric literals
      | IDENT                                 // Variables
      | "-" factor                            // Unary minus
      | "(" expr ")"                          // Parenthesized expressions

// Identifier list: e.g., x, yx_10
ident_list: IDENT ("," IDENT)*

// Terminals
IDENT: /[a-zA-Z][a-zA-Z0-9_]*[0-9]*/         // Variables like x, yx_10, xcb_1x
NUMBER: /[0-9]+(\.[0-9]+)?/                  // Integer or decimal numbers
WS: /[ \t\n]+/                                // Whitespace
%ignore WS                                    // Ignore whitespace